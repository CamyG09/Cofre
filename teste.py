# -*- coding: utf-8 -*-
"""Teste.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FhqfC3CkYBkgDyDcTyRVEwlLMbkaKANc
"""
# teste iris

# Libraries
import sys
import scipy
import numpy
import matplotlib
import pandas as pd
import sklearn

# Load libraries
import pandas as pd
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

# load through url
url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
attributes = ["sepal_length", "sepal_width", "petal_length", "petal_width", "class"]
dataset = pd.read_csv(url, names = attributes)
dataset.columns = attributes

#Dimensões do Dataset
#Podemos ter uma ideia rápida de quantas instâncias (linhas) e quantos atributos (colunas) os dados contêm com a propriedade shape.
# shape
print(dataset.shape)

#Analise os dados
#Também é sempre uma boa ideia analisar seus dados.
# head
print(dataset.head(20))

#Resumo estatístico
#Agora podemos dar uma olhada em um resumo de cada atributo.

#Isso inclui a contagem, a média, os valores mínimo e máximo, bem como alguns percentis.

# descriptions
print(dataset.describe())

#Distribuição de Classe
# class distribution
print(dataset.groupby("class").size())

#Gráficos univariados para entender melhor cada atributo.

# box and whisker plots
dataset.plot(kind="box", subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.show()

# line
dataset.plot(kind="line", subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.show()

# Barra
dataset.plot(kind="bar", subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.show()

# histograms
dataset.hist()
plt.show()

#Gráficos multivariados para entender melhor as relações entre os atributos.

# scatter plot matrix
scatter_matrix(dataset)
plt.show()

# Criar um conjunto de dados de validação

# Split-out validation dataset
array = dataset.values
X = array[:,0:4]
Y = array[:,4]
validation_size = 0.20
seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)

# Test Harness
#Usaremos a validação cruzada (cross-validation) de 10 vezes para estimar a precisão.
#Isso dividirá nosso conjunto de dados em 10 partes, treinar em 9 e testar em 1 e repetir para todas as combinações de divisões de teste de trem.

# Test options and evaluation metric
seed = 7
scoring = "accuracy"


#Construir Modelos e avaliar

#Regressão Logística (LR)
#Análise Linear Discriminante (LDA)
#K-vizinhos mais próximos (KNN).
#Árvores de Classificação (Decision Tree) e Regressão (CART).
#Gaussian Naive Bayes (NB).
#Support Vector Machines (SVM).


# Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression(solver='liblinear', 
                                        multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
# evaluate each model in turn
results = []
names = []
for name, model in models:
   kfold = model_selection.KFold(n_splits=10, random_state=seed)
   cv_results = model_selection.cross_val_score(model, X_train, 
                                                Y_train, cv=kfold, scoring=scoring)
   results.append(cv_results)
   names.append(name)
   msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
   print(msg)

#Selecione o melhor modelo
#criar um gráfico dos resultados da avaliação do modelo e comparar o spread e a accuracy média de cada modelo.


# Compare Algorithms
fig = plt.figure()
fig.suptitle('Algorithm Comparison')
ax = fig.add_subplot(111)
plt.boxplot(results)
ax.set_xticklabels(names)
plt.show()

#Faça previsões
#O algoritmo KNN é muito simples e foi um modelo preciso baseado em nossos testes.

# Make predictions on validation dataset
knn = KNeighborsClassifier()
knn.fit(X_train, Y_train)
predictions = knn.predict(X_validation)
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))
