# -*- coding: utf-8 -*-
"""teste3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1clnY6YSguzq_nk_lfR7rWSv1Chbca6iL
"""

# Libraries
import sys
import scipy
import numpy
import matplotlib
import pandas as pd
import sklearn

# Load libraries
import pandas as pd
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

dataset = pd.read_csv('/content/wine_dataset.csv')
dataset.head()

#Dimensões
print(dataset.shape)

#Analise os dados
print(dataset.head(20))

#Resumo estatístico
# descriptions
print(dataset.describe())

#Gráficos univariados para entender melhor cada atributo.

# box and whisker plots
dataset.plot(kind="line", subplots=True, layout=(4,4), sharex=False, sharey=False)
plt.show()

# histograms
dataset.hist()
plt.show()

#Gráficos multivariados para entender melhor as relações entre os atributos.

# scatter plot matrix
scatter_matrix(dataset)
plt.show()

# Criar um conjunto de dados de validação

# Split-out validation dataset
array = dataset.values
x = array[:,0:4]
y = array[:,4]
validation_size = 0.30
seed = 7
x_train, x_validation, y_train, y_validation = model_selection.train_test_split(x, y, test_size=validation_size, random_state=seed)

# Test Harness
#Usaremos a validação cruzada (cross-validation) de 10 vezes para estimar a precisão.
#Isso dividirá nosso conjunto de dados em 10 partes, treinar em 9 e testar em 1 e repetir para todas as combinações de divisões de teste de trem.

# Test options and evaluation metric
seed = 7
scoring = "accuracy"

dataset['style'] = dataset['style'].replace('red', 0)
dataset['style'] = dataset['style'].replace('white', 1)

x_train, x_validation, y_train, y_validation = model_selection.train_test_split(x, y, test_size=validation_size, random_state=seed)

y = dataset['style']
x = dataset.drop('style', axis = 1)

#Construir Modelos e avaliar
# Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression(solver='liblinear', 
                                        multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))
# evaluate each model in turn
results = []
names = []

from sklearn.ensemble import ExtraTreesClassifier
modelo = ExtraTreesClassifier()
modelo.fit(x_train, y_train)
resultado = modelo.score(x_validation, y_validation)
print("Acurácia:", resultado)

for name, model in models:
   kfold = model_selection.KFold(n_splits=3)
   cv_results = model_selection.cross_val_score(model, x_train, y_train, cv=kfold)
   results.append(cv_results)
   names.append(name)
   msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
print(msg)

y_validation[400:405]

#Selecione o melhor modelo
#criar um gráfico dos resultados da avaliação do modelo e comparar o spread e a accuracy média de cada modelo.


# Compare Algorithms
fig = plt.figure()
fig.suptitle('Algorithm Comparison')
ax = fig.add_subplot(111)
plt.boxplot(results)
ax.set_xticklabels(names)
plt.show()

#Faça previsões
#O algoritmo KNN é muito simples e foi um modelo preciso baseado em nossos testes.

# Make predictions on validation dataset
knn = KNeighborsClassifier()
knn.fit(x_train, y_train)
predictions = knn.predict(x_validation)
print(accuracy_score(y_validation, predictions))
print(confusion_matrix(y_validation, predictions))
print(classification_report(y_validation, predictions))